// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceCRUDClient is the client API for ServiceCRUD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceCRUDClient interface {
	CreateManga(ctx context.Context, in *Manga, opts ...grpc.CallOption) (*Id, error)
	ReadManga(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Manga, error)
	ReadAllManga(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ServiceCRUD_ReadAllMangaClient, error)
	UpdateManga(ctx context.Context, in *Manga, opts ...grpc.CallOption) (*Status, error)
	DeleteManga(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
}

type serviceCRUDClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceCRUDClient(cc grpc.ClientConnInterface) ServiceCRUDClient {
	return &serviceCRUDClient{cc}
}

func (c *serviceCRUDClient) CreateManga(ctx context.Context, in *Manga, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/api.ServiceCRUD/CreateManga", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCRUDClient) ReadManga(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Manga, error) {
	out := new(Manga)
	err := c.cc.Invoke(ctx, "/api.ServiceCRUD/ReadManga", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCRUDClient) ReadAllManga(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ServiceCRUD_ReadAllMangaClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceCRUD_ServiceDesc.Streams[0], "/api.ServiceCRUD/ReadAllManga", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceCRUDReadAllMangaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceCRUD_ReadAllMangaClient interface {
	Recv() (*Manga, error)
	grpc.ClientStream
}

type serviceCRUDReadAllMangaClient struct {
	grpc.ClientStream
}

func (x *serviceCRUDReadAllMangaClient) Recv() (*Manga, error) {
	m := new(Manga)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceCRUDClient) UpdateManga(ctx context.Context, in *Manga, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/api.ServiceCRUD/UpdateManga", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCRUDClient) DeleteManga(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/api.ServiceCRUD/DeleteManga", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceCRUDServer is the server API for ServiceCRUD service.
// All implementations must embed UnimplementedServiceCRUDServer
// for forward compatibility
type ServiceCRUDServer interface {
	CreateManga(context.Context, *Manga) (*Id, error)
	ReadManga(context.Context, *Id) (*Manga, error)
	ReadAllManga(*Empty, ServiceCRUD_ReadAllMangaServer) error
	UpdateManga(context.Context, *Manga) (*Status, error)
	DeleteManga(context.Context, *Id) (*Status, error)
	mustEmbedUnimplementedServiceCRUDServer()
}

// UnimplementedServiceCRUDServer must be embedded to have forward compatible implementations.
type UnimplementedServiceCRUDServer struct {
}

func (UnimplementedServiceCRUDServer) CreateManga(context.Context, *Manga) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManga not implemented")
}
func (UnimplementedServiceCRUDServer) ReadManga(context.Context, *Id) (*Manga, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadManga not implemented")
}
func (UnimplementedServiceCRUDServer) ReadAllManga(*Empty, ServiceCRUD_ReadAllMangaServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAllManga not implemented")
}
func (UnimplementedServiceCRUDServer) UpdateManga(context.Context, *Manga) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManga not implemented")
}
func (UnimplementedServiceCRUDServer) DeleteManga(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManga not implemented")
}
func (UnimplementedServiceCRUDServer) mustEmbedUnimplementedServiceCRUDServer() {}

// UnsafeServiceCRUDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceCRUDServer will
// result in compilation errors.
type UnsafeServiceCRUDServer interface {
	mustEmbedUnimplementedServiceCRUDServer()
}

func RegisterServiceCRUDServer(s grpc.ServiceRegistrar, srv ServiceCRUDServer) {
	s.RegisterService(&ServiceCRUD_ServiceDesc, srv)
}

func _ServiceCRUD_CreateManga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Manga)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCRUDServer).CreateManga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceCRUD/CreateManga",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCRUDServer).CreateManga(ctx, req.(*Manga))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCRUD_ReadManga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCRUDServer).ReadManga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceCRUD/ReadManga",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCRUDServer).ReadManga(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCRUD_ReadAllManga_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceCRUDServer).ReadAllManga(m, &serviceCRUDReadAllMangaServer{stream})
}

type ServiceCRUD_ReadAllMangaServer interface {
	Send(*Manga) error
	grpc.ServerStream
}

type serviceCRUDReadAllMangaServer struct {
	grpc.ServerStream
}

func (x *serviceCRUDReadAllMangaServer) Send(m *Manga) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceCRUD_UpdateManga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Manga)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCRUDServer).UpdateManga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceCRUD/UpdateManga",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCRUDServer).UpdateManga(ctx, req.(*Manga))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCRUD_DeleteManga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCRUDServer).DeleteManga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceCRUD/DeleteManga",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCRUDServer).DeleteManga(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceCRUD_ServiceDesc is the grpc.ServiceDesc for ServiceCRUD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceCRUD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ServiceCRUD",
	HandlerType: (*ServiceCRUDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateManga",
			Handler:    _ServiceCRUD_CreateManga_Handler,
		},
		{
			MethodName: "ReadManga",
			Handler:    _ServiceCRUD_ReadManga_Handler,
		},
		{
			MethodName: "UpdateManga",
			Handler:    _ServiceCRUD_UpdateManga_Handler,
		},
		{
			MethodName: "DeleteManga",
			Handler:    _ServiceCRUD_DeleteManga_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadAllManga",
			Handler:       _ServiceCRUD_ReadAllManga_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
